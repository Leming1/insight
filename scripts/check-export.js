#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º next.config.js
console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ next.config.js:');
try {
  const configPath = path.join(process.cwd(), 'next.config.js');
  const configContent = fs.readFileSync(configPath, 'utf8');
  
  const checks = {
    'output: \'export\'': configContent.includes("output: 'export'"),
    'images.unoptimized: true': configContent.includes('unoptimized: true'),
    'trailingSlash: true': configContent.includes('trailingSlash: true')
  };
  
  Object.entries(checks).forEach(([check, passed]) => {
    console.log(`   ${passed ? '‚úÖ' : '‚ùå'} ${check}`);
  });
} catch (error) {
  console.log('   ‚ùå –§–∞–π–ª next.config.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json —Å–∫—Ä–∏–ø—Ç—ã
console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json:');
try {
  const packagePath = path.join(process.cwd(), 'package.json');
  const packageContent = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
  
  const hasExportScript = packageContent.scripts && packageContent.scripts.export;
  console.log(`   ${hasExportScript ? '‚úÖ' : '‚ùå'} –°–∫—Ä–∏–ø—Ç export –Ω–∞–π–¥–µ–Ω`);
} catch (error) {
  console.log('   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ next/image
console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è next/image:');
try {
  const srcPath = path.join(process.cwd(), 'src');
  const imageImports = [];
  
  function checkDirectory(dir) {
    const files = fs.readdirSync(dir);
    files.forEach(file => {
      const filePath = path.join(dir, file);
      const stat = fs.statSync(filePath);
      
      if (stat.isDirectory()) {
        checkDirectory(filePath);
      } else if (file.endsWith('.tsx') || file.endsWith('.ts')) {
        const content = fs.readFileSync(filePath, 'utf8');
        if (content.includes("from 'next/image'") || content.includes('from "next/image"')) {
          imageImports.push(filePath.replace(process.cwd(), ''));
        }
      }
    });
  }
  
  checkDirectory(srcPath);
  
  if (imageImports.length === 0) {
    console.log('   ‚úÖ next/image –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è');
  } else {
    console.log('   ‚ùå next/image –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ñ–∞–π–ª–∞—Ö:');
    imageImports.forEach(file => console.log(`      ${file}`));
  }
} catch (error) {
  console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API —Ä–æ—É—Ç–æ–≤
console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ä–æ—É—Ç–æ–≤:');
try {
  const apiPath = path.join(process.cwd(), 'src/app/api');
  if (fs.existsSync(apiPath)) {
    console.log('   ‚ùå API —Ä–æ—É—Ç—ã –Ω–∞–π–¥–µ–Ω—ã - –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞');
  } else {
    console.log('   ‚úÖ API —Ä–æ—É—Ç–æ–≤ –Ω–µ—Ç');
  }
} catch (error) {
  console.log('   ‚úÖ API —Ä–æ—É—Ç–æ–≤ –Ω–µ—Ç');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:');
try {
  const srcPath = path.join(process.cwd(), 'src');
  const serverFunctions = [];
  
  function checkServerFunctions(dir) {
    const files = fs.readdirSync(dir);
    files.forEach(file => {
      const filePath = path.join(dir, file);
      const stat = fs.statSync(filePath);
      
      if (stat.isDirectory()) {
        checkServerFunctions(filePath);
      } else if (file.endsWith('.tsx') || file.endsWith('.ts')) {
        const content = fs.readFileSync(filePath, 'utf8');
        if (content.includes('cookies()') || content.includes('headers()') || content.includes('next/server')) {
          serverFunctions.push(filePath.replace(process.cwd(), ''));
        }
      }
    });
  }
  
  checkServerFunctions(srcPath);
  
  if (serverFunctions.length === 0) {
    console.log('   ‚úÖ –°–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è');
  } else {
    console.log('   ‚ùå –°–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–∞—Ö:');
    serverFunctions.forEach(file => console.log(`      ${file}`));
  }
} catch (error) {
  console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤');
}

console.log('\nüéØ –ì–æ—Ç–æ–≤–æ! –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm run export –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–±–æ—Ä–∫–∏.');
