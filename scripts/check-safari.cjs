#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('ü¶Å –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Safari...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —à—Ä–∏—Ñ—Ç—ã
console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤:');
try {
  const cssPath = path.join(process.cwd(), 'src/styles/globals.css');
  const cssContent = fs.readFileSync(cssPath, 'utf8');
  
  const checks = {
    'font-display: swap': cssContent.includes('font-display: swap'),
    '-webkit-font-smoothing': cssContent.includes('-webkit-font-smoothing'),
    'Safari font fallbacks': cssContent.includes('-apple-system'),
    'backdrop-filter fallback': cssContent.includes('@supports not (backdrop-filter')
  };
  
  Object.entries(checks).forEach(([check, passed]) => {
    console.log(`   ${passed ? '‚úÖ' : '‚ùå'} ${check}`);
  });
} catch (error) {
  console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CSS —Ñ–∞–π–ª–∞');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É —à—Ä–∏—Ñ—Ç–æ–≤
console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤:');
try {
  const layoutPath = path.join(process.cwd(), 'src/app/layout.tsx');
  const layoutContent = fs.readFileSync(layoutPath, 'utf8');
  
  const preloadChecks = {
    'preload Erewhon': layoutContent.includes('Erewhon-BoldItalic.otf'),
    'preload TT Norms Regular': layoutContent.includes('TT Norms Std Trial Condensed Regular.otf'),
    'preload TT Norms Bold': layoutContent.includes('TT Norms Std Trial Condensed Bold.otf'),
    'crossOrigin attribute': layoutContent.includes('crossOrigin="anonymous"')
  };
  
  Object.entries(preloadChecks).forEach(([check, passed]) => {
    console.log(`   ${passed ? '‚úÖ' : '‚ùå'} ${check}`);
  });
} catch (error) {
  console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ layout.tsx');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º Safari –º–µ—Ç–∞-—Ç–µ–≥–∏
console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Safari –º–µ—Ç–∞-—Ç–µ–≥–æ–≤:');
try {
  const layoutPath = path.join(process.cwd(), 'src/app/layout.tsx');
  const layoutContent = fs.readFileSync(layoutPath, 'utf8');
  
  const metaChecks = {
    'apple-mobile-web-app-capable': layoutContent.includes('apple-mobile-web-app-capable'),
    'format-detection': layoutContent.includes('format-detection'),
    'apple-mobile-web-app-status-bar-style': layoutContent.includes('apple-mobile-web-app-status-bar-style')
  };
  
  Object.entries(metaChecks).forEach(([check, passed]) => {
    console.log(`   ${passed ? '‚úÖ' : '‚ùå'} ${check}`);
  });
} catch (error) {
  console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω (Safari iOS):');
try {
  const modalPath = path.join(process.cwd(), 'src/components/ui/RoomDetailsModal.tsx');
  const modalContent = fs.readFileSync(modalPath, 'utf8');
  
  const modalChecks = {
    'iOS bounce prevention': modalContent.includes('/iPad|iPhone|iPod/'),
    'body overflow fix': modalContent.includes('body.style.overflow'),
    'position fixed': modalContent.includes('position = "fixed"')
  };
  
  Object.entries(modalChecks).forEach(([check, passed]) => {
    console.log(`   ${passed ? '‚úÖ' : '‚ùå'} ${check}`);
  });
} catch (error) {
  console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS —Å–≤–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ Safari
console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:');
try {
  const srcPath = path.join(process.cwd(), 'src');
  const safariIssues = [];
  
  function checkFiles(dir) {
    const files = fs.readdirSync(dir);
    files.forEach(file => {
      const filePath = path.join(dir, file);
      const stat = fs.statSync(filePath);
      
      if (stat.isDirectory()) {
        checkFiles(filePath);
      } else if (file.endsWith('.css') || file.endsWith('.tsx')) {
        const content = fs.readFileSync(filePath, 'utf8');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ CSS —Å–≤–æ–π—Å—Ç–≤–∞
        if (content.includes('backdrop-filter') && !content.includes('@supports')) {
          safariIssues.push(`backdrop-filter –±–µ–∑ fallback –≤ ${filePath.replace(process.cwd(), '')}`);
        }
        if (content.includes('gap:') && content.includes('flex') && !content.includes('space-')) {
          // –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ Safari –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç gap –≤ flexbox
          // safariIssues.push(`flex gap –≤ ${filePath.replace(process.cwd(), '')}`);
        }
      }
    });
  }
  
  checkFiles(srcPath);
  
  if (safariIssues.length === 0) {
    console.log('   ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  } else {
    safariIssues.forEach(issue => console.log(`   ‚ö†Ô∏è  ${issue}`));
  }
} catch (error) {
  console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CSS —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —à—Ä–∏—Ñ—Ç–æ–≤
console.log('\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —à—Ä–∏—Ñ—Ç–æ–≤:');
try {
  const fontsPath = path.join(process.cwd(), 'public/fonts');
  
  const requiredFonts = [
    'Erewhon-BoldItalic.otf',
    'TT Norms Std Trial Condensed Regular.otf',
    'TT Norms Std Trial Condensed Bold.otf'
  ];
  
  requiredFonts.forEach(font => {
    const fontPath = path.join(fontsPath, font);
    if (fs.existsSync(fontPath)) {
      const stats = fs.statSync(fontPath);
      console.log(`   ‚úÖ ${font} (${(stats.size / 1024).toFixed(1)} kB)`);
    } else {
      console.log(`   ‚ùå ${font} - –ù–ï –ù–ê–ô–î–ï–ù`);
    }
  });
} catch (error) {
  console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤ —à—Ä–∏—Ñ—Ç–æ–≤');
}

console.log('\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è Safari:');
console.log('   ‚Ä¢ –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö iOS/macOS');
console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –Ω–∞ iPhone/iPad');
console.log('   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —à—Ä–∏—Ñ—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã');
console.log('   ‚Ä¢ –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ–æ—Ä–º-—Ñ–∞–∫—Ç–æ—Ä—ã: iPhone SE, iPad, Desktop Safari');

console.log('\nü¶Å –ü—Ä–æ–≤–µ—Ä–∫–∞ Safari —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
